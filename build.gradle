buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.eriwen:gradle-cobertura-plugin:1.0'
        classpath files(antennaJar)
    }
}

// antenna ant tasks
ant.taskdef(resource: 'antenna.properties') {
    classpath {
        pathElement(path: buildscript.configurations.classpath.asPath)
    }
}

allprojects {

}

subprojects {
    repositories {
        flatDir {
            name "windowsJRE"
            dirs "${System.env.JAVA_HOME}/jre/lib"
        }
        flatDir {
            // Also requires 'ln -s /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/{classes,rt}.jar' to work
            name "osxJRE"
            dirs "${System.env.JAVA_HOME}/../Classes"
        }
        flatDir {
            name "wtk"
            dirs "${System.env.JAVA_ME_HOME}/lib"
        }
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'cobertura'


    configurations {
        bootClasspath
        jreBootClasspath
        testBootClasspath
    }

    dependencies {
        bootClasspath 'wtk:midp_2.1'
        bootClasspath 'wtk:cldc_1.1'

        testBootClasspath configurations.bootClasspath
        jreBootClasspath 'jre:rt'
        jreBootClasspath 'jre:jsse'

        compile configurations.bootClasspath
        compile 'wtk:jsr172_1.0'
        compile 'wtk:jsr177_1.0'
        compile 'wtk:jsr280_1.0'

        testCompile "junit:junit:4.11"
        testCompile 'net.sourceforge.cobertura:cobertura:1.9.4.1'
        testCompile "org.mockito:mockito-all:1.9.5"
        testCompile "org.powermock:powermock-api-mockito:1.5"
        testCompile "org.powermock:powermock-module-junit4:1.5"
    }

    /**
     * Don't scan for test classes, as there will be an error with JavaME compiled classes
     */
    tasks.withType(Test) {
        scanForTestClasses = false
        include "**/*Test.class" // whatever Ant pattern matches the test class files
    }

    project.ext.target = buildDir.toString()


    buildscript {
        dependencies {
            classpath files(rootDir.absolutePath + "/" + antennaJar)
        }
    }

    // antenna ant tasks
    ant.taskdef(resource: 'antenna.properties') {
        classpath {
            pathElement(path: buildscript.configurations.classpath.asPath)
        }
    }

    task preverify << {
        project.ext.wtkHome = "$System.env.JAVA_ME_HOME"
        project.ext.javaHome = "$System.env.JAVA_HOME"

        project.ext.errors = false
        if (project.ext.wtkHome == null || ''.equals(project.ext.wtkHome)) {
            println('Environment variable JAVA_ME_HOME has not been set')
            project.ext.errors = true
        } else if (!file(project.ext.wtkHome).exists() || !file(project.ext.wtkHome).isDirectory()) {
            println('The JAVA_ME_HOME-variable must point to the installatio of the Java ME SDK')
            project.ext.errors = true
        }

        if (project.ext.errors) {
            println("Error: Missing variables. Failing build")
            System.exit(1)
        }

    }

    task init(dependsOn: preverify) << {
        if (buildDir.isDirectory()) {
            ant.delete(dir: sourceSets.main.output.classesDir)
        }

        buildDir.mkdirs()

        // wtk properties
        ant.property(name: 'wtk.home', value: project.ext.wtkHome)
        ant.property(name: 'wtk.cldc.version', value: cldcVersion)
        ant.property(name: 'wtk.midp.version', value: midpVersion)
    }

    project.ext.executeWtkBuild = {
        sourceDir, destDir ->

        ant.wtkbuild(
                srcdir: sourceDir,
                destdir: destDir,
                encoding: sourceEncoding,
                source: javaVersion,
                includeantruntime: false,
                preverify: doPreverify) {

            bootclasspath {
                pathElement(path: configurations.bootClasspath.asPath)
            }
            classpath {
                pathElement(path: configurations.compile.asPath)
            }
        }
    }

    project.ext.convertSourceSetToDirectories = {
        set ->
        project.ext.temp = ""
        for (file in set) {
            if (file.exists()) {
                project.ext.temp += file.getAbsolutePath() + ":"
            }
        }

        return project.ext.temp
    }

    /**
     * Build the project using antenna and the WTK toolkit
     */
    task wtkbuild(dependsOn: init) << {
        sourceSets.main.output.classesDir.mkdirs()
        sourceSets.main.output.resourcesDir.mkdirs()

        // Convert the source directories to a format that ant/antenna can understand
        project.ext.sourceDirectories = project.ext.convertSourceSetToDirectories(sourceSets.main.java.srcDirs)
        project.ext.executeWtkBuild(project.ext.sourceDirectories, sourceSets.main.output.classesDir)
    }

    /**
     * Package the MIDlet package containing the unit tests to run on a device/emulator
     */
    task wtkpackage << {
        project.ext.jadFile = target + '/wtk/' + project.name + '.jad'
        project.ext.jarFile = target + '/wtk/' + project.name + '.jar'

        ant.copy(file: projectDir.toString() + "/Application Descriptor",
                tofile: project.ext.jadFile)

        ant.wtkpackage(
                jadFile: project.ext.jadFile,
                jarFile: project.ext.jarFile,
                autoversion: doAutoversion,
                obfuscate: doObfuscate,
                preverify: false) {
            bootclasspath {
                pathElement(path: configurations.bootClasspath.asPath)
            }
            classpath {
                pathElement(path: configurations.compile.asPath)
            }
            ant.fileSet(dir: sourceSets.main.output.classesDir.toString())
            ant.fileSet(dir: sourceSets.main.output.resourcesDir.toString())
        }

    }

}
