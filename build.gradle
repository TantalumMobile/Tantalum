buildscript {
    repositories {
        mavenCentral()
        maven {
          url uri('file:repository')
        }
    }
    dependencies {
        classpath 'com.eriwen:gradle-cobertura-plugin:1.1.0'
        // This is a local repository, so we can rely on SNAPSHOT-releases. Once this is an online dep, we must have a fixed version
        classpath 'org.inkinen:gradle-preprocessor-plugin:0.1-SNAPSHOT'
    }
}
// We need to explicitly import the implementation class. This should not be required?
import org.inkinen.PreprocessorTask

allprojects {
    repositories {
        mavenCentral()
    }
}

apply plugin:  'idea'

subprojects {
    apply plugin: 'java'
    apply plugin: 'cobertura'
    apply plugin: 'preprocessor'

    configurations {
        bootClasspath
        jreBootClasspath
        testBootClasspath
        provided
        release
        testJar
    }

    dependencies {
        testCompile "junit:junit:4.11"
        testCompile 'net.sourceforge.cobertura:cobertura:1.9.4.1'
        testCompile "org.mockito:mockito-all:1.9.5"
        testCompile "org.powermock:powermock-api-mockito:1.5"
        testCompile "org.powermock:powermock-module-junit4:1.5"
    }

    project.ext.preprocessedSources = "$buildDir/preprocessed-sources/main"
    // Define a provided scope, as defined here
    // http://blog.codeaholics.org/2012/emulating-mavens-provided-scope-in-gradle/
    // The following lines are needed only when we build using the standard java compile
    // task. For wtk-build we set the classpath manually and thus it's not really needed
    sourceSets {
        main.compileClasspath += configurations.provided
        release.compileClasspath += configurations.provided

        test {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }

        release {
            java {
                srcDir project.ext.preprocessedSources
            }

        }

    }
    // End of compileJava requirements
    project.tasks['javadoc'].classpath += configurations.provided

    apply plugin: 'jdepend'
    apply plugin: 'pmd'
    apply plugin: 'project-report'
    apply plugin: 'findbugs'

    // Don't fail the build for static analysis warnings
    project.findbugs.ignoreFailures = true
    project.pmd.ignoreFailures = true

    // Enable HTML report generation
    tasks.withType(FindBugs) {
        reports.xml.enabled = false
        reports.html.enabled = true
    }
    tasks.withType(Pmd) {
        reports.xml.enabled = false
        reports.html.enabled = true
    }

    compileJava {
        sourceCompatibility = '1.3'
        targetCompatibility = '1.3'

        options.encoding = 'UTF-8'
        
        // Coverity Requires Spawned java process to mimick the compilation
        options.fork = true 
        options.forkOptions.executable = "javac"

        // Enable this to be strict about warnings, and fail the build if there are any
//    options.compilerArgs = ['-Xlint', '-Xlint:-serial', '-Xlint:-path']
    }

    compileTestJava {
        sourceCompatibility = '1.6'
        targetCompatibility = '1.6'

        options.encoding = 'UTF-8'
//    options.compilerArgs = ['-Xlint', '-Xlint:-serial', '-Xlint:-path']
    }


    compileReleaseJava {
        sourceCompatibility = '1.3'
        targetCompatibility = '1.3'

        options.encoding = 'UTF-8'
        // Enable this to be strict about warnings, and fail the build if there are any
//    options.compilerArgs = ['-Xlint', '-Xlint:-serial', '-Xlint:-path']
    }

    compileTestJava {
        sourceCompatibility = '1.6'
        targetCompatibility = '1.6'

        options.encoding = 'UTF-8'
//    options.compilerArgs = ['-Xlint', '-Xlint:-serial', '-Xlint:-path']
    }

    task createSourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task createJavadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    jar {
        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }

    task preprocessSources(overwrite: true, type: PreprocessorTask) {
         source = sourceSets.main.java.srcDirs
         destination = new File(project.ext.preprocessedSources)
    }

    task createTestJar(type: Jar) {
        dependsOn compileTestJava
        from sourceSets.test.output
        classifier = 'tests'
    }

    task createReleaseJar(type: Jar) {
        dependsOn compileReleaseJava
        from sourceSets.release.output
        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }

    compileReleaseJava.dependsOn preprocessSources
    build.dependsOn createReleaseJar

    artifacts {
        release createReleaseJar
        testJar createTestJar
        archives createSourcesJar
        archives createJavadocJar
    }
}
